%% r : 0 - participant, 1 - manager
%% x : 1 - commit, 0 - abort
component Manager
	  attributes: n, c, r
	  behaviour:
	    let {
	    	  A := (2)@(r = 0).nil
		  B := <c < n>(x = 1)(x).[c := c + 1]B
		    + <c < n>(x = 0)(x).(0)@(r = 0).nil
		    + <c = n>(1)@(r = 0).nil
	    	}
	    init A | B
end

component Participant
	  attributes: d, id
	  behaviour:
	    let {
	       A := (r = 1 and x = 2)(x).(
	       	       (d)@(id = 1).A
		         +
	                (id = 1 and y /= 2)(y).[d := y]nil
		      )
		  + (r = 1 and x /= 2)(x).[d := x]nil
	    	}
	    init A
end



C1 : Manager (n -> 3, c -> 0, r -> 1)
C2 : Participant (d -> 1, r -> 0)
C3 : Participant (d -> 0, r -> 0)
C4 : Participant (d -> 0, r -> 0)

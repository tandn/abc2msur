(#sync-1-n send receive)

(#restrict receive)

(#replicated-vars u o y c z x)

;; code for component type Phi
(#def A
      (#choice
      (#seq
        (#guard (= (this o) 1)
          (send #t (list (this u) (this c)) ))
        (#choice
          (#seq
            (#guard (= (this o) 1)
              (receive (and (= (this u) "msg[0]") (/= "msg[1]" (this c))) (list x y) ((this o)) ((this c))))
            (#call A))
          (#seq
            (#guard (= (this o) 1)
              (receive (and (= (this u) "msg[0]") (= "msg[1]" (this c))) (list x y) ((this c)) (0)))
            (#call A))))
      (#seq
        (#guard (= (this o) 1)
          (receive (= o (this o)) (list x y) ))
        (#seq
          (#guard (= (this o) 1)
            (receive (/= o (this o)) (list x y) ))
          (#call A)))))

(#def B
      (#seq
      (#guard (= (this o) 0)
        (receive (/= o (this o)) (list x y) ))
      (#choice
        (#seq
          (#guard (/= y (this c))
            (send #t (list x (this c)) ((this o)) (y)))
          (#call B))
        (#seq
          (#guard (= y (this c))
            (send #t (list x (this c)) (list (this o) (this c)) (list 1 0)))
          (#call B))
        (#seq
          (#guard (= (this o) 0)
            (receive (= "msg[0]" x) (list z y) ))
          (#call B)))))

(#def Phi
      (#par
      (#call A)
      (#call B)))

;; initialization 

(#agent A1 Phi (u 1) (c 1) (o 1))
(#agent A2 Phi (u 2) (c 1) (o 0))
(#agent A3 Phi (u 3) (c 1) (o 0))

(#system (A1 1) (A2 1) (A3 1))

